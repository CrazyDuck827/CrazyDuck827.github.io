<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mysql主从复制</title>
      <link href="/2020/07/30/mysql-zhu-cong-fu-zhi/"/>
      <url>/2020/07/30/mysql-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows安装两个Mysql"><a href="#Windows安装两个Mysql" class="headerlink" title="Windows安装两个Mysql"></a>Windows安装两个Mysql</h3><ul><li><p>phpstudy下的mysql文件夹复制一份</p></li><li><p>修改my.ini</p><pre><code>  [client]      port=3307  [mysqld]      port=3307      basedir=&quot;……&quot;      datadir=&quot;……&quot;</code></pre></li><li><p>安装服务</p><pre><code>  #进入mysql/bin文件夹  .\mysqld --install mysql2  # 注册服务  net start mysql2  # 开启服务  net stop mysql2  # 停止服务  .\mysqld --remove mysql2  # 删除服务  mysqld --console  # 启动服务报错查询具体问题</code></pre></li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><ul><li><p>主服务my.ini配置</p><pre><code>  log-bin=master-bin  # 表示开启二进制日志，并把二进制日志前缀改为master-bin 数据库备份文件名称，可自由取，生成后会带文件序列号，服务每重启一次就会产生一个新文件  server-id = 1  binlog-do-db=test # 表示需要备份的数据库为test  binlog-ignore-db=mysql # 表示不需要备份的数据库为mysql  # 如果两个都不设的话，从服务器会复制主服务器的全部数据库 （本人就是此设置）</code></pre></li><li><p>主服务登录mysql</p><pre><code>  mysql -u root -p  grant replication slave on *.* to &#39;liuliuyan&#39;@&#39;%&#39; identified by &#39;123456&#39;;  注：  @后面的ip地址为允许连接的客户端的ip地址，如果改为 ‘%’，就表示客户端没有ip地址的限制  然后查看主服务master的状态： （每重启一次mysql服务，mysql-bin的日志就会新建一个，所以重启主服务，从服务必须先停止再重新配置后启动）  flush privileges;  show master status; # 查看主库的当前状态</code></pre></li><li><p>从服务配置</p><pre><code>  log-bin=master-bin  # 表示开启二进制日志，并把二进制日志前缀改为master-bin 数据库备份文件名称，可自由取，生成后会带文件序列号，服务每重启一次就会产生一个新文件  server-id = 1  binlog-do-db=test # 表示需要备份的数据库为test  binlog-ignore-db=mysql # 表示不需要备份的数据库为mysql  # 如果两个都不设的话，从服务器会复制主服务器的全部数据库 （本人就是此设置）</code></pre></li><li><p>从服务登录mysql</p><pre><code>  mysql -u root -p  change master to master_host=&#39;localhost&#39;,master_user=&#39;liuliuyan&#39;,master_password=&#39;123456&#39;,master_port=3305,master_log_file=&#39;master-bin.000003&#39;,master_log_pos=1245;  参数详解：  master_host： 主服务器的IP  master_user： 主服务器上新创建的用户名  master_password： 用户的密码  master_port： 主服务器的端口，如果未曾修改，默认即可。  master_log_file： 主服务器二进制日志文件的名称，填写查看主服务器的master状态时显示的File的值  start slave; # 启动从服务的slave复制功能  show slave status \G;   # 查从服务器的slave状态  # Slave_IO_Running 和 Slave_SQL_Running 的值都为 Yes，则说明主从复制的所有配置已成功</code></pre></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-Last-IO-Errno-1593-server-uuid重复导致slave报错"><a href="#1-Last-IO-Errno-1593-server-uuid重复导致slave报错" class="headerlink" title="1. Last_IO_Errno: 1593 server-uuid重复导致slave报错"></a>1. Last_IO_Errno: 1593 server-uuid重复导致slave报错</h4><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><ul><li><p>在两个库上分别查看</p><pre><code>  mysql&gt; SHOW VARIABLES LIKE &#39;%server_%&#39;;  +---------------------------------+--------------------------------------+  | Variable_name                   | Value                                |  +---------------------------------+--------------------------------------+  | innodb_ft_server_stopword_table |                                      |  | server_id                       | 11                                   |  | server_id_bits                  | 32                                   |  | server_uuid                     | feac17c0-d55e-11e5-b426-525400079dc4 |  +---------------------------------+--------------------------------------+  4 rows in set (0.00 sec)  mysql&gt; SHOW VARIABLES LIKE &#39;%server_%&#39;;  +---------------------------------+--------------------------------------+  | Variable_name                   | Value                                |  +---------------------------------+--------------------------------------+  | innodb_ft_server_stopword_table |                                      |  | server_id                       | 22                                   |  | server_id_bits                  | 32                                   |  | server_uuid                     | feac17c0-d55e-11e5-b426-525400079dc4 |  +---------------------------------+--------------------------------------+  4 rows in set (0.00 sec)  # server_uuid相同</code></pre></li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li><p>修改期中一个uuid</p><pre><code>  SELECT uuid();  修改auto.cnf  重启Mysql</code></pre></li><li><p>删除auto.cnf</p><pre><code>  rm -rf mysql_dir/bin/auto.cnf  重启Mysql</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue问题合集</title>
      <link href="/2020/04/29/vue-wen-ti-he-ji/"/>
      <url>/2020/04/29/vue-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue项目搭建打包流程"><a href="#Vue项目搭建打包流程" class="headerlink" title="Vue项目搭建打包流程"></a>Vue项目搭建打包流程</h3><ul><li><p>安装node.js</p></li><li><p>npm淘宝镜像</p><pre><code>  npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></li><li><p>安装全局 vue-cli</p><pre><code>  cnpm install -g  vue-cli</code></pre></li><li><p>安装依赖</p><pre><code>  cnpm install</code></pre></li><li><p>运行项目</p><pre><code>  cnpm run dev</code></pre></li><li><p>打包项目</p><pre><code>  npm run build  cnpm i &amp;&amp; npm run build #解决打包慢 </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Front </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Front </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端必备Nginx配置</title>
      <link href="/2020/03/01/hou-duan-bi-bei-nginx-pei-zhi/"/>
      <url>/2020/03/01/hou-duan-bi-bei-nginx-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><ul><li>防盗链</li><li>根据文件类型设置过期时间</li><li>静态资源访问</li><li>日志配置</li><li>日志字段说明<ul><li>access_log 访问日志</li><li>error_log 日志</li><li>日志切割</li></ul></li><li>反向代理</li><li>禁止指定user_agent</li><li>nginx访问控制</li><li>负载均衡</li></ul><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><pre><code>    location ~* \.(gif|jpg|png)$ {        # 只允许 192.168.0.1 请求资源        valid_referers none blocked 192.168.0.1;        if ($invalid_referer) {           rewrite ^/ http://$host/logo.png;        }    }</code></pre><h3 id="根据文件类型设置过期时间"><a href="#根据文件类型设置过期时间" class="headerlink" title="根据文件类型设置过期时间"></a>根据文件类型设置过期时间</h3><pre><code>    location ~.*\.css$ {        expires 1d;        break;    }    location ~.*\.js$ {        expires 1d;        break;    }    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {        access_log off;        expires 15d;    #保存15天        break;    }    # curl -x127.0.0.1:80 http://www.test.com/static/image/common/logo.png -I #测试图片的max-age</code></pre><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><pre><code>    http {        # 这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，        # 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。        open_file_cache max=204800 inactive=20s;        # open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，        # 如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个        # 文件在inactive 时间内一次没被使用，它将被移除。        open_file_cache_min_uses 1;        # 这个是指多长时间检查一次缓存的有效信息        open_file_cache_valid 30s;        # 默认情况下，Nginx的gzip压缩是关闭的， gzip压缩功能就是可以让你节省不        # 少带宽，但是会增加服务器CPU的开销哦，Nginx默认只对text/html进行压缩 ，        # 如果要对html之外的内容进行压缩传输，我们需要手动来设置。        gzip on;        gzip_min_length 1k;        gzip_buffers 4 16k;        gzip_http_version 1.0;        gzip_comp_level 2;        gzip_types text/plain application/x-javascript text/css application/xml;        server {            listen       80;            server_name www.test.com;            charset utf-8;            root   /data/www.test.com;            index  index.html index.htm;        }    }</code></pre><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><table><thead><tr><th>字段</th><th align="center">说明</th></tr></thead><tbody><tr><td>remote_addr 和 http_x_forwarded_for</td><td align="center">客户端 IP 地址</td></tr><tr><td>remote_user</td><td align="center">客户端用户名称</td></tr><tr><td>request</td><td align="center">请求的 URI 和 HTTP 协议</td></tr><tr><td>status</td><td align="center">请求状态</td></tr><tr><td>body_bytes_sent</td><td align="center">返回给客户端的字节数，不包括响应头的大小</td></tr><tr><td>bytes_sent</td><td align="center">返回给客户端总字节数</td></tr><tr><td>connection</td><td align="center">连接的序列号</td></tr><tr><td>connection_requests</td><td align="center">当前同一个 TCP 连接的的请求数量</td></tr><tr><td>msec</td><td align="center">日志写入时间。单位为秒，精度是毫秒</td></tr><tr><td>pipe</td><td align="center">如果请求是通过HTTP流水线(pipelined)发送，pipe值为“p”，否则为“.”</td></tr><tr><td>http_referer</td><td align="center">记录从哪个页面链接访问过来的</td></tr><tr><td>http_user_agent</td><td align="center">记录客户端浏览器相关信息</td></tr><tr><td>request_length</td><td align="center">请求的长度（包括请求行，请求头和请求正文）</td></tr><tr><td>time_iso8601</td><td align="center">ISO8601标准格式下的本地时间</td></tr><tr><td>time_local</td><td align="center">记录访问时间与时区</td></tr></tbody></table><h4 id="access-log-访问日志"><a href="#access-log-访问日志" class="headerlink" title="access_log 访问日志"></a>access_log 访问日志</h4><pre><code>    http {        log_format  access  &#39;$remote_addr - $remote_user [$time_local] $host &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$clientip&quot;&#39;;        access_log  /srv/log/nginx/talk-fun.access.log  access;    }</code></pre><h4 id="error-log-日志"><a href="#error-log-日志" class="headerlink" title="error_log 日志"></a>error_log 日志</h4><pre><code>    error_log  /srv/log/nginx/nginx_error.log  error;    # error_log /dev/null; # 真正的关闭错误日志    http {        # ...    }</code></pre><h4 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h4><pre><code>    # 和apache不同的是，nginx没有apache一样的工具做切割，需要编写脚本实现。# 在/usr/local/sbin下写脚本    #!/bin/bash    dd=$(date -d &#39;-1 day&#39; +%F)[ -d /tmp/nginx_log ] || mkdir /tmp/nginx_log    mv /tmp/nginx_access.log /tmp/nginx_log/$dd.log    /etc/init.d/nginx reload &gt; /dev/null</code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><pre><code>    http {        include mime.types;        server_tokens off;        ## 配置反向代理的参数        server {            listen    8080;            ## 1. 用户访问 http://ip:port，则反向代理到 https://github.com            location / {                proxy_pass  https://github.com;                proxy_redirect     off;                proxy_set_header   Host             $host;                proxy_set_header   X-Real-IP        $remote_addr;                proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;            }            ## 2.用户访问 http://ip:port/README.md，则反向代理到            ##   https://github.com/zibinli/blog/blob/master/README.md            location /README.md {                proxy_set_header  X-Real-IP  $remote_addr;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;                proxy_pass https://github.com/zibinli/blog/blob/master/README.md;            }        }    }</code></pre><h3 id="禁止指定user-agent"><a href="#禁止指定user-agent" class="headerlink" title="禁止指定user_agent"></a>禁止指定user_agent</h3><pre><code>    #虚拟主机的配置文件里加入：    if ($http_user_agent ~* &#39;baidu|360|sohu&#39;) #禁止useragent为baidu、360和sohu，~*表示不区分大小写匹配    {       return 403;    }    location /  和  location  ~ /  优先级是不一样的。     结合这个文章研究一下吧 http://blog.itpub.net/27181165/viewspace-777202/    curl -A &quot;baidu&quot; -x127.0.0.1:80 www.test.com/forum.php -I    该命令指定百度为user_agent,返回403</code></pre><h3 id="nginx访问控制"><a href="#nginx访问控制" class="headerlink" title="nginx访问控制"></a>nginx访问控制</h3><pre><code>    # 可以设置一些配置禁止一些ip的访问    deny 127.0.0.1;     #全局定义限制，location里的是局部定义的。如果两者冲突，以location这种精确地优先，    location ~ .*admin\.php$ {        #auth_basic &quot;cct auth&quot;;        #auth_basic_user_file /usr/local/nginx/conf/.htpasswd;        allow 127.0.0.1;  只允许127.0.0.1的访问，其他均拒绝        deny all;        include fastcgi_params;        fastcgi_pass unix:/tmp/www.sock;        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME /data/www$fastcgi_script_name;    }</code></pre><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><pre><code>    http {        upstream test.net {            ip_hash;            server 192.168.10.13:80;            server 192.168.10.14:80  down;            server 192.168.10.15:8009  max_fails=3  fail_timeout=20s;            server 192.168.10.16:8080;        }        server {            location / {                proxy_pass  http://test.net;            }        }    }</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://juejin.im/post/5d7e3f51f265da03a31d687b" target="_blank" rel="noopener">后端必备 Nginx 配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xshell文件拖拽上传下载</title>
      <link href="/2019/12/02/xshell-wen-jian-tuo-zhuai-shang-chuan-xia-zai/"/>
      <url>/2019/12/02/xshell-wen-jian-tuo-zhuai-shang-chuan-xia-zai/</url>
      
        <content type="html"><![CDATA[<pre><code>    yum install lrzsz    rz -e 上传    sz xxx 下载</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM问题合集</title>
      <link href="/2019/12/01/php-fpm-wen-ti-he-ji/"/>
      <url>/2019/12/01/php-fpm-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-PHP修改文件上传大小配置"><a href="#linux-PHP修改文件上传大小配置" class="headerlink" title="linux PHP修改文件上传大小配置"></a>linux PHP修改文件上传大小配置</h3><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>修改文件上传大小配置</p><ul><li>vim php.ini<pre><code>  max_execution_time = 600 ;每个PHP页面运行的最大时间值(秒)，默认30秒  max_input_time = 600 ;每个PHP页面接收数据所需的最大时间，默认60秒  memory_limit = 8m ;每个PHP页面所吃掉的最大内存，默认8M  把上述参数修改后，在网络所允许的正常情况下，就可以上传大体积文件了  max_execution_time = 600  max_input_time = 600  memory_limit = 32m  file_uploads = on  upload_tmp_dir = /tmp  upload_max_filesize = 32m  post_max_size = 32m</code></pre></li><li>重启</li><li>不行的话修改下nginx.conf上传文件大小和请求时间</li></ul></li><li><p>添加项目目录到指定位置</p><ul><li>找到fastcgi.conf位置，一般在/usr/local/nginx/conf/fastcgi.conf。</li><li>将项目目录添加到fastcgi_param PHP_ADMIN_VALUE这一行，fastcgi_param PHP_ADMIN_VALUE “open_basedir=……..”，重启nginx即可。</li></ul></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/qq_23013025/article/details/83653495" target="_blank" rel="noopener">linux PHP修改文件上传大小配置</a></p><hr><h3 id="php-fpm开启报错-ERROR-An-another-FPM-instance-seems-to-already-listen-on-tmp-php-cgi-sock"><a href="#php-fpm开启报错-ERROR-An-another-FPM-instance-seems-to-already-listen-on-tmp-php-cgi-sock" class="headerlink" title="php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock"></a>php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock</h3><h4 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h4><ul><li>php-fpm已启动，但未绑定端口</li></ul><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>修改配置文件<ul><li>vim php-fpm.conf<pre><code>  [www]  listen = /tmp/php-cgi.sock   //将此处替换成127.0.0.1:9000  listen.backlog = -1  listen.allowed_clients = 127.0.0.1  listen.owner = www  listen.group = www</code></pre></li><li>vim nginx.conf<pre><code>  location ~ [^/]\.php(/|$) {         fastcgi_pass unix:/tmp/php-cgi.sock;    //将此处替换成127.0.0.1:9000         fastcgi_index index.php;         fastcgi_param SCRIPT_FILENAME     $document_root$fastcgi_script_name;         include fastcgi_params;  }  location / {        root   html;        index index.php index.html index.htm;  }</code></pre></li><li>重启</li></ul></li></ul><h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/wt645631686/p/8377159.html" target="_blank" rel="noopener">php-fpm开启报错-ERROR: An another FPM instance seems to already listen on /tmp/php-cgi.sock</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell问题合集</title>
      <link href="/2019/11/29/shell-wen-ti-he-ji/"/>
      <url>/2019/11/29/shell-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="shell脚本”syntax-error-near-unexpected-token-‘fi’”"><a href="#shell脚本”syntax-error-near-unexpected-token-‘fi’”" class="headerlink" title="shell脚本”syntax error near unexpected token ‘fi’”"></a>shell脚本”syntax error near unexpected token ‘fi’”</h3><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><ul><li>windows和linux的编码模式不一致导致</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>统一编码模式<ul><li>vim shell文件</li><li>命令行执行 :set ff 发现出来的是dos</li><li>命令行执行 :set ff=unix , :wq</li><li>再次执行，正常使用</li></ul></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[解决shell脚本“syntax error near unexpected token `fi’”的问题](<a href="https://blog.csdn.net/jsqfengbao/article/details/95597260" target="_blank" rel="noopener">https://blog.csdn.net/jsqfengbao/article/details/95597260</a>)</p><hr><h3 id="nohup-ignoring-input-and-appending-output-to-‘nohup-out’"><a href="#nohup-ignoring-input-and-appending-output-to-‘nohup-out’" class="headerlink" title="nohup: ignoring input and appending output to ‘nohup.out’"></a>nohup: ignoring input and appending output to ‘nohup.out’</h3><h4 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h4><ul><li>没有写入权限</li></ul><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>重定向错误信息<ul><li>nohup ./program &gt;/dev/null 2&gt;&amp;1 &amp; ，/dev/null是linux系统的一个空洞</li><li>nohup ./program &gt;/其他有权限的目录 2&gt;&amp;1 &amp;</li><li>可以用命令： tail -f nohup.out 查看具体报错信息</li></ul></li></ul><h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/klb561/p/10153834.html" target="_blank" rel="noopener">nohup 命令（设置后台进程）： appending output to ‘nohup.out’ 问题</a><br><a href="https://www.cnblogs.com/quchunhui/p/5582371.html" target="_blank" rel="noopener">使用Linux重定向解决nohup.out无写权限问题</a><br><a href="https://www.vpslala.com/t/19" target="_blank" rel="noopener">nohup: ignoring input and appending output to ‘nohup.out’解决方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx问题合集</title>
      <link href="/2019/11/28/nginx-wen-ti-he-ji/"/>
      <url>/2019/11/28/nginx-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx服务器偶尔出现-No-input-file-specified"><a href="#Nginx服务器偶尔出现-No-input-file-specified" class="headerlink" title="Nginx服务器偶尔出现 No input file specified."></a>Nginx服务器偶尔出现 No input file specified.</h3><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><ul><li>Nginx出于安全考虑，默认开启了防跨目录设置</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>直接#注释</p><ul><li>找到fastcgi.conf位置，一般在/usr/local/nginx/conf/fastcgi.conf。</li><li>将fastcgi_param PHP_ADMIN_VALUE这一行#注释，重启nginx即可。</li></ul></li><li><p>添加项目目录到指定位置</p><ul><li>找到fastcgi.conf位置，一般在/usr/local/nginx/conf/fastcgi.conf。</li><li>将项目目录添加到fastcgi_param PHP_ADMIN_VALUE这一行，fastcgi_param PHP_ADMIN_VALUE “open_basedir=……..”，重启nginx即可。</li></ul></li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/resilient/article/details/89234482" target="_blank" rel="noopener">Nginx服务器出现 No input file specified</a></p><hr><h3 id="Nginx下出现Access-denied-403-see-security-limit-extensions"><a href="#Nginx下出现Access-denied-403-see-security-limit-extensions" class="headerlink" title="Nginx下出现Access denied (403) see security.limit_extensions"></a>Nginx下出现Access denied (403) see security.limit_extensions</h3><h4 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h4><ul><li>配置文件问题</li></ul><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>修改配置文件<ul><li>在你php-fpm配置文件php-fpm.conf中设置security.limit_extensions 为 .php 或 .php5，或者其他任何与你环境一致的后缀名。 对于开发环境下的一些用户来说, 完全移除所有security.limit_extensions的值或设置为FALSE，能够保证可以正常工作</li><li>在你的nginx配置文件中设置fastcgi_pass 为你的socket地址(e.g. unix:/var/run/php-fpm/php-fpm.sock;)， 替代ip地址:端口这种方式(127.0.0.1:9000)</li><li>检查你的SCRIPT_FILENAME, fastcgi_param 并根据你文件的地址来设置它们.</li><li>在你的nginx配置文件中包含有fastcgi_split_path_info ^(.+.php)(/.+)$; 则所有其他的对应fastcgi参数也都应该在location块中定义；具体可参考phalcon的nginx官方配置</li><li>在你的php.ini配置文件中，设置cgi.fix_pathinfo=1</li><li>一般是最后一点原因</li></ul></li></ul><h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/u012129607/article/details/62042169" target="_blank" rel="noopener">Nginx下出现Access denied (403) see security.limit_extensions错误的解决方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序生成二维码</title>
      <link href="/2019/11/19/wei-xin-xiao-cheng-xu-sheng-cheng-er-wei-ma/"/>
      <url>/2019/11/19/wei-xin-xiao-cheng-xu-sheng-cheng-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="小程序登录"><a href="#小程序登录" class="headerlink" title="小程序登录"></a>小程序登录</h3><h4 id="登录流程时序"><a href="#登录流程时序" class="headerlink" title="登录流程时序"></a>登录流程时序</h4><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/wx1.jpg" alt="小程序登录流程时序"></p><ul><li><p>说明：</p><ul><li>调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</li><li>调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 和 会话密钥 session_key。</li><li>之后开发者服务器可以根据用户标识来生成自定义登录态（如token等等…），用于后续业务逻辑中前后端交互时识别用户身份。</li></ul></li><li><p>注意：</p><ul><li><p>会话密钥 session_key 是对用户数据进行 加密签名 的密钥。为了应用自身的数据安全，开发者服务器不应该把会话密钥下发到小程序，也不应该对外提供这个密钥。</p></li><li><p>临时登录凭证 code 只能使用一次</p></li></ul></li></ul><h4 id="UnionID-机制说明"><a href="#UnionID-机制说明" class="headerlink" title="UnionID 机制说明"></a>UnionID 机制说明</h4><ul><li><p>只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 UnionID 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid是相同的。</p></li><li><p>绑定：登录微信开放平台 — 管理中心 — 小程序 — 绑定小程序</p></li></ul><h3 id="生成小程序二维码"><a href="#生成小程序二维码" class="headerlink" title="生成小程序二维码"></a>生成小程序二维码</h3><blockquote><p>场景说明：一个小程序生成二维码，用户扫码后跳转至另一个二维码<br>注意：前提是两个小程序绑定同一个开放平台</p></blockquote><h4 id="生成流程"><a href="#生成流程" class="headerlink" title="生成流程"></a>生成流程</h4><ul><li><p>A小程序调起生成接口，获取B小程序的鉴权信息并填入请求地址</p></li><li><p>请求地址：POST <a href="https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=ACCESS_TOKEN</a></p></li><li><p>返回值说明：如果调用成功，会直接返回图片二进制内容，如果请求失败，会返回 JSON 格式的数据</p></li><li><p>因为二维码永久有效，将返回内容写入文件，方便下次返回</p></li><li><p>前端接收参数后需解密进一步请求</p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html" target="_blank" rel="noopener">微信官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> wechat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-Composer镜像</title>
      <link href="/2019/11/18/php-composer-jing-xiang/"/>
      <url>/2019/11/18/php-composer-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="Composer镜像"><a href="#Composer镜像" class="headerlink" title="Composer镜像"></a>Composer镜像</h3><table><thead><tr><th>镜像名</th><th align="center">地址</th><th align="right">赞助商</th><th align="right">更新频率</th><th align="right">备注</th></tr></thead><tbody><tr><td>阿里云 Composer 镜像</td><td align="center"><a href="https://mirrors.aliyun.com/composer" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer</a></td><td align="right">阿里云</td><td align="right">96 秒</td><td align="right">推荐</td></tr><tr><td>腾讯云 Composer 镜像</td><td align="center"><a href="https://mirrors.cloud.tencent.com/composer" target="_blank" rel="noopener">https://mirrors.cloud.tencent.com/composer</a></td><td align="right">腾讯云</td><td align="right">24 小时</td><td align="right">-</td></tr><tr><td>PHP 国内 Composer 镜像</td><td align="center"><a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></td><td align="right">仁润股份</td><td align="right">24 小时</td><td align="right">不稳定</td></tr><tr><td>华为云 Composer 镜像</td><td align="center"><a href="https://repo.huaweicloud.com/repository/php" target="_blank" rel="noopener">https://repo.huaweicloud.com/repository/php</a></td><td align="right">未知</td><td align="right">96 秒</td><td align="right">-</td></tr><tr><td>php.cnpkg.org Composer 镜像</td><td align="center"><a href="https://php.cnpkg.org" target="_blank" rel="noopener">https://php.cnpkg.org</a></td><td align="right">安畅网络</td><td align="right">60 秒</td><td align="right">-</td></tr></tbody></table><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><ul><li><p>全局命令</p><pre><code>  composer config -g repos.packagist composer https://mirrors.aliyun.com/composer</code></pre></li><li><p>项目composer.json</p><pre><code>  &quot;repositories&quot;: {      &quot;packagist&quot;: {          &quot;type&quot;: &quot;composer&quot;,          &quot;url&quot;: &quot;https://mirrors.aliyun.com/composer/&quot;      }  }</code></pre></li></ul><h3 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h3><ul><li>全局安装插件：hirak/prestissimo<pre><code>  composer global require hirak/prestissimo</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建FTP</title>
      <link href="/2019/11/17/linux-da-jian-ftp/"/>
      <url>/2019/11/17/linux-da-jian-ftp/</url>
      
        <content type="html"><![CDATA[<h3 id="vsftpd"><a href="#vsftpd" class="headerlink" title="vsftpd"></a>vsftpd</h3><ul><li><p>检查是否安装了vsftpd，无则安装。命令： rpm -qa | grep vsftpd</p></li><li><p>安装命令： yum -y install vsftpd</p></li><li><p>创建ftp用户，比如ftp_test。命令： useradd -s /sbin/nologin -d /home/ftp_test ftp_test 。注意目录权限</p></li><li><p>为ftp_test用户创建密码。命令：passwd ftp_test</p></li><li><p>编辑vsftpd配置文件  命令： vim /etc/vsftpd/vsftpd.conf  具体配置如下</p><pre><code>  anonymous_enable=NO             #允许匿名用户访问为了安全选择关闭  local_enable=YES                # 允许本地用户登录  write_enable=YES                # 是否允许写入  local_umask=022                 # 本地用户上传文件的umask  dirmessage_enable=YES           #为YES则进入目录时显示此目录下由message_file选项指定的文本文件(,默认为.message)的内容  xferlog_enable=YES              #开启日志  xferlog_std_format=YES          #标准格式  connect_from_port_20=YES  xferlog_file=/var/log/xferlog   #ftp日志目录  idle_session_timeout=6000       #设置客户端连接时间  data_connection_timeout=1200    #设置数据连接时间 针对上传，下载  chroot_list_enable=YES  chroot_list_file=/etc/vsftpd/chroot_list    #设置为YES则下面的控制有效  chroot_list_enable=YES          #若为NO,则记录在chroot_list_file所指定的文件(默认是/etc/vsftpd.chroot_list)中的用户将被chroot在登录后所在目录中,无法离开.如果为YES,则所记录的用户将不被chroot.这里YES.  chroot_local_user=YES  userlist_deny=NO                #若设置为YES则记录在userlist_file选项指定文件(默认是/etc/vsftpd.user_list)中的用户将无法login,并且将检察下面的userlist_deny选项  userlist_enable=YES             #若为NO,则仅接受记录在userlist_file选项指定文件(默认是/etc/vsftpd.user_list)中的用户的login请求.若为YES则不接受这些用户的请求.  userlist_file=/etc/vsftpd/user_list         #白名单  chroot_list_enable=YES  local_root=/var/ftp/pub         #根目录  listen=YES  pam_service_name=vsftpd  userlist_enable=YES  tcp_wrappers=YES</code></pre></li><li><p>FTP服务配置文件一些常用的配置选项参数：</p><pre><code>  #匿名用户常用参数：  anonymous_enable=NO：是否允许匿名访问  anon_umask=022：设置匿名用户所上传文件的默认权限掩码值  anon_root=/vat/ftp：设置匿名用户的宿主目录（默认为/var/ftp）  anon_upload_enable=YES：是否允许匿名用户上传文件  anon_mkdir_write_enable=YES：是否允许匿名用户有创建目录的写入权限  anon_other_write_enable=YES：是否允许匿名用户有其他写入的权限（例如改名、修改、删除等）  本地用户常用参数：  local_enable=YES：是否允许本地系统用户访问  local_umask=022：设置本地用户所上传文件的默认权限掩码值   local_root=/var/ftp：设置本地用户的ftp根目录（默认为用户的宿主目录）  chroot_local_user=YES：是否将ftp本地用户禁锢在宿主目录中  local_max_rate=0：限制本地用户的最大传输速率（0为无限制），单位是字节/秒（B/s）  allow_writeable_chroot=YES：允许被限制用户的主目录具有写权限  全局配置常用参数：  listen=YES：是否以独立的运行方式监听服务  listen_address=0.0.0.0：设置监听ftp服务的IP地址  listen_port=21：设置监听ftp服务的端口号  write_enable=YES： 启用任何形式的写入权限（比如上传、删除文件等）都需要开启此项  download_enable=YES：是否允许下载文件（比如建立仅限于浏览、上传的ftp服务器时可将其设置                                                                     为&quot;NO&quot;）  xferlog_enable=YES：启用xferlog日志，默认记录到/var/log/xferlog  xferlog_std_format=YES： 启用标准的xferlog日志格式  connect_from_port_20=YES：允许服务器主动模式  pasv_enable=NO：禁止被动模式连接；默认允许被动模式连接  pam_service_name=vsftpd：设置用于用户认证的PAM文件位置（/etc/pam.d/目录中对应的文件名）  userlist_enable=YES：是否启用user_list用户列表文件  max_clients=0：最多允许多少客户端同时连接（0为无限制）  max_per_ip=0                                         对来自同一个IP地址的客户端，最多允许多少个并发连接（0为无限制）  tcp_wrappers=YES：是否启用TCP_Wrappers主机访问控制  虚拟用户常用参数：  guest_username=test：指定映射的系统用户名称；  guest_enable=YES：是否启用虚拟用户；  allow_writeable_chroot=允许被限制用户的主目录具有写权限（此项必须写入，否则可能会报错）  anon_world_readable_only=NO：允许用户下载目录内容  anon_other_write_enable=YES：允许匿名用户有其他写入权限，如重命名、覆盖及删除文件等；  user_config_dir=/etc/vsftpd/vusers_dir：指定虚拟用户独立的配置文件目录；</code></pre></li><li><p>启动vsftp服务。命令：systemctl start vsftpd.service</p></li><li><p>查看ftp服务的状态。命令：systemctl status vsftpd.service</p></li><li><p>开启防火墙端口</p></li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>ftp vsftpd 530 login incorrect 解决办法汇总</p><ul><li>密码错误</li><li>检查/etc/vsftpd/vsftpd.conf配置</li><li>检查/etc/pam.d/vsftpd<ul><li>注释 #auth required pam_shells.so</li></ul></li></ul></li><li><p>could not read chroot() list file:/etc/vsftpd.chroot_list</p><ul><li>在/etc/vsftpd下新建chroot_list,加入登陆用户的名字</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php设计模式[2]工厂方法模式</title>
      <link href="/2019/11/07/php-she-ji-mo-shi-2-gong-han-fang-fa-mo-shi/"/>
      <url>/2019/11/07/php-she-ji-mo-shi-2-gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><pre><code>要实例化的对象充满不确定性可能会改变的时候要创建的对象的数目和类型是未知的</code></pre><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><pre><code>1个 interface 或者 abstract 产品父类多个实现 interface 或者继承 abstract 的具体产品类1个 interface 或者 abstract 工厂父类多个实现 interface 或者继承 abstract 的具体工厂类具体工厂类和具体产品类一一对应在具体工厂类中实例化具体的产品类</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>Operation.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 操作类型抽象类 */abstract class Operation{    /**     * 运算符号左边的值     */    protected $numberA = 0;    /**     * 运算符号右边的值     */    protected $numberB = 0;    /**     * 计算结果     */    abstract public function getResult();    /**     * 给 numberA 赋值     */    public function setNumberA($number)    {        $this-&gt;numberA = $number;    }    /**     * 给 numberB 赋值     */    public function setNumberB($number)    {        $this-&gt;numberB = $number;    }}</code></pre><p>Add.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 加法 */class Add extends Operation{    /**     * 计算结果     */    public function getResult()    {        return $this-&gt;numberA + $this-&gt;numberB;    }}</code></pre><p>Sub.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 减法 */class Sub extends Operation{    /**     * 计算结果     */    public function getResult()    {        return $this-&gt;numberA - $this-&gt;numberB;    }}</code></pre><p>Mul.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 乘法 */class Mul extends Operation{    /**     * 计算结果     */    public function getResult()    {        return $this-&gt;numberA * $this-&gt;numberB;    }}</code></pre><p>Div.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 除法 */class Div extends Operation{    /**     * 计算结果     */    public function getResult()    {        if ($this-&gt;numberB == 0) {            throw new \InvalidArgumentException(&#39;除数不能为0&#39;);        }        return $this-&gt;numberA / $this-&gt;numberB;    }}</code></pre><p>Factory.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 工厂抽象类 */abstract class Factory{    /**     * 创建产品     */    abstract public function create();}</code></pre><p>AddFactory.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;/** * 加法工厂 */class AddFactory extends Factory{    /**     * 创建加法产品类     */    public function create()    {        return new Add();    }}</code></pre><p>使用的时候 new 各工厂即可；<br>运行示例；<br>index.php</p><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\FactoryMethod;require __DIR__.&#39;/../vendor/autoload.php&#39;;/** * 客户端 */class Client{    /**     * 不好的示例   直接 new 具体的产品     */    public function bad()    {        // 计算 1+2        $operation = new Add();        $operation-&gt;setNumberA(1);        $operation-&gt;setNumberB(2);        $result = $operation-&gt;getResult();        echo $result;        echo &#39;&lt;br&gt;&#39;;        // 计算 3+4        $operation = new Add();        $operation-&gt;setNumberA(3);        $operation-&gt;setNumberB(4);        $result = $operation-&gt;getResult();        echo $result;    }    /**     * 好的示例  new 产品对应的工厂     */    public function good()    {        $factory = new AddFactory();        $operation = $factory-&gt;create();        $operation-&gt;setNumberA(1);        $operation-&gt;setNumberB(2);        $result = $operation-&gt;getResult();        echo $result;    }}$client = new Client();$client-&gt;bad();echo &#39;&lt;br&gt;&#39;;$client-&gt;good();</code></pre><blockquote><p>通过代码我们可以看出<br>工厂方法不需要再做判断了<br>但是增加了工作量<br>每增加一个产品都需要增加对应的工厂<br>这就形成了一种特殊的代码重复<br>不过式设计模式并不是独立使用的<br>很多时候都是多个模式互相配合来弱化各自的缺点</p></blockquote><p><img src="/image/oop2.jpg" alt="oop"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php设计模式[1]单例模式</title>
      <link href="/2019/11/06/php-she-ji-mo-shi-1-dan-li-mo-shi/"/>
      <url>/2019/11/06/php-she-ji-mo-shi-1-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><pre><code>数据库连接这种比较耗费资源的操作我们希望整个应用只实例化一个</code></pre><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><pre><code>4私1公：私有化构造方法： 防止使用 new 创建多个实例私有化克隆方法： 防止 clone 多个实例私有化重建方法： 防止反序列化私有化静态属性： 防止直接访问存储实例的属性</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>&lt;?phpnamespace Baijunyao\DesignPatterns\Singleton;/** * 普通类 */class Db1{    public static $instance = null;    public static function getInstance()    {        if (null === static::$instance) {            static::$instance = new static();        }        return static::$instance;    }    public function __construct(){}    public function __clone(){}    public function __wakeup(){}}$db1 = new Db1();$db2 = new Db1();$db3 = clone $db2;$db4 = Db1::getInstance();$db5 = unserialize(serialize($db4));var_dump($db1);echo &#39;&lt;hr&gt;&#39;;var_dump($db2);echo &#39;&lt;hr&gt;&#39;;var_dump($db3);echo &#39;&lt;hr&gt;&#39;;var_dump($db4);echo &#39;&lt;hr&gt;&#39;;var_dump($db5);echo &#39;&lt;hr&gt;&#39;;/** * 单例 */class Db2{    private static $instance = null;    public static function getInstance()    {        if (null === static::$instance) {            static::$instance = new static();        }        return static::$instance;    }    /**     * 防止使用 new 创建多个实例     */    private function __construct(){}    /**     * 防止 clone 多个实例     */    private function __clone(){}    /**     * 防止反序列化     */    private function __wakeup(){}}$db6 = Db2::getInstance();$db7 = Db2::getInstance();var_dump($db6);echo &#39;&lt;hr&gt;&#39;;var_dump($db7);echo &#39;&lt;hr&gt;&#39;;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/oop1.jpg" alt="单例模式"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php设计模式[0]序言</title>
      <link href="/2019/11/01/php-she-ji-mo-shi-0-xu-yan/"/>
      <url>/2019/11/01/php-she-ji-mo-shi-0-xu-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式的划分"><a href="#设计模式的划分" class="headerlink" title="设计模式的划分"></a>设计模式的划分</h3><ul><li>创建型：单例、抽象工厂、建造者、工厂、原型；</li><li>结构型：适配器、桥接、装饰、组合、外观、享元、代理；</li><li>行为型：模版方法、命令、迭代器、观察者、中介者、备忘录、解释器、状态、策略、职责链、访问者；</li></ul><h3 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h3><ul><li>设计模式的宗旨是重用</li><li>目的是建立对象间的关联, 提供了让代码之间松耦合的各种方案<ul><li>它的两个原则是：<ul><li>按接口编程而不是按实现来编程</li><li>优先使用组合而不是继承</li></ul></li></ul></li></ul><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>这个系列全部转自： <a href="https://baijunyao.com" target="_blank" rel="noopener">白俊遥博客</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64图片上传</title>
      <link href="/2019/09/17/base64-tu-pian-shang-chuan/"/>
      <url>/2019/09/17/base64-tu-pian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="base64图片上传"><a href="#base64图片上传" class="headerlink" title="base64图片上传"></a>base64图片上传</h1><h3 id="web部分"><a href="#web部分" class="headerlink" title="web部分"></a>web部分</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Image1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgFile<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 实时预览</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".imgFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".imgFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span>onloadend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#Image1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ajax上传</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#register2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> IMG_BASE <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#Image1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要上传的图片的base64编码</span>        <span class="token keyword">var</span> IMG_ROUTE <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".imgFile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取上传图片路径，为获取图片类型使用</span>        <span class="token keyword">var</span> IMG_ENDFOUR <span class="token operator">=</span> IMG_ROUTE<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>IMG_ROUTE<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//截取路径后四位，判断图片类型</span>        <span class="token keyword">var</span> IMG_FOMATE <span class="token operator">=</span> <span class="token string">"jpeg"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片类型***</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>IMG_ENDFOUR<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>            IMG_FOMATE <span class="token operator">=</span> <span class="token string">"jpg"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>IMG_ENDFOUR<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">".png"</span><span class="token punctuation">)</span>            IMG_FOMATE <span class="token operator">=</span> <span class="token string">"png"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>IMG_ENDFOUR<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">".bmp"</span><span class="token punctuation">)</span>            IMG_FOMATE <span class="token operator">=</span> <span class="token string">"bmp"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//图片正式开始上传</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"server/head.ashx"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'imgBase'</span><span class="token punctuation">:</span> IMG_BASE<span class="token punctuation">,</span> <span class="token string">'imgFormat'</span><span class="token punctuation">:</span> IMG_FOMATE <span class="token punctuation">}</span><span class="token punctuation">,</span>            dataType<span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//data为返回的图片路径</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="php部分"><a href="#php部分" class="headerlink" title="php部分"></a>php部分</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Base64_Upload</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token constant">ROOT_PATH</span> <span class="token punctuation">.</span> <span class="token string">'public'</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token string">'upload'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param $base64_arr  base64格式图片     * @param array $allow_type  允许上传的文件类型     * @return array|bool     */</span>    <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$base64_arr</span><span class="token punctuation">,</span> <span class="token variable">$allow_type</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$base64_arr</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$base64_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$fileArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$base64_imgs</span> <span class="token operator">=</span> <span class="token variable">$base64_arr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类型错误中断</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$base64_imgs</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$base64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$imgType</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getImgType</span><span class="token punctuation">(</span><span class="token variable">$base64</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$imgType</span><span class="token punctuation">,</span> <span class="token variable">$allow_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            list($width, $height)=getimagesize($base64);</span><span class="token comment" spellcheck="true">//            if(($width/$height) != 1){</span><span class="token comment" spellcheck="true">//                $flag = false;</span><span class="token comment" spellcheck="true">//                break;</span><span class="token comment" spellcheck="true">//            }</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$base64_imgs</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$base64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$imgType</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getImgType</span><span class="token punctuation">(</span><span class="token variable">$base64</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$imgType</span><span class="token punctuation">;</span>                <span class="token variable">$filePath</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//路径加名字</span>                <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getBase64Content</span><span class="token punctuation">(</span><span class="token variable">$base64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//base64的图片压缩到文件里</span>                <span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AliModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">OssUploadFile</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rs</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token variable">$fileArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$rs</span><span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'file_path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$fileArr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param $base64Str     * @param $start     * @param $end     * @return bool|string     * 获取base64图片类型     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getImgType</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param $base64Str     * @return bool|string     * 获取base64图片内容     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getBase64Content</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$base64Str</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>附实时预览图片插件：<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="noopener">webuploader</a>    </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/yangchuanqi/p/8477957.html" target="_blank" rel="noopener">JQuery input file 上传图片</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理</title>
      <link href="/2019/09/07/nginx-fan-xiang-dai-li/"/>
      <url>/2019/09/07/nginx-fan-xiang-dai-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p></blockquote><h3 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h3><ul><li>引入如下两张理解：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx1.jpg" alt="正向代理和反向代理 图1"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx2.png" alt="正向代理和反向代理 图2"></p><ul><li><p>正向代理:客户端 &lt;-&gt; 代理 -&gt;服务端</p><pre><code>  正向代理简单地打个租房的比方:  A(客户端)想租C(服务端)的房子,但是A(客户端)并不认识C(服务端)租不到。  B(代理)认识C(服务端)能租这个房子所以你找了B(代理)帮忙租到了这个房子。  这个过程中C(服务端)不认识A(客户端)只认识B(代理)  C(服务端)并不知道A(客户端)租了房子，只知道房子租给了B(代理)。</code></pre></li><li><p>反向代理:客户端 -&gt;代理 &lt;-&gt; 服务端</p><pre><code>  反向代理也用一个租房的例子:  A(客户端)想租一个房子,B(代理)就把这个房子租给了他。  这时候实际上C(服务端)才是房东。  B(代理)是中介把这个房子租给了A(客户端)。  这个过程中A(客户端)并不知道这个房子到底谁才是房东  他都有可能认为这个房子就是B(代理)的</code></pre></li></ul><h3 id="配置演示"><a href="#配置演示" class="headerlink" title="配置演示"></a>配置演示</h3><blockquote><p>正向代理</p></blockquote><p>首先在A服务器的nginx设置访问控制<br>访问控制之前我访问A下的test.html是这样的:</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx3.png" alt="正向代理和反向代理3"></p><p>打开nginx.conf<br>设置访问A的IP不是118.126.106.11(我的B服务器)则返回403</p><pre><code>    location / {        if ( $remote_addr !~* &quot;^118\.126\.106\.11&quot;) {            return 403;        }        root   /opt/app/demo/html;        index  index.html index.htm;    }</code></pre><p>添加后reload一下nginx再访问test.html:</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx4.png" alt="正向代理和反向代理4"></p><p>此时本地我的浏览器就是被限制了,访问不了该资源。</p><p>现在登录上B服务器,打开nginx.conf</p><p>添加resolver和proxy_pass,设置如下:</p><pre><code>server {    listen       80;    server_name  localhost nginx.tangll.cn;    resolver 8.8.8.8;    location / {        proxy_pass http://$http_host$request_uri;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   /usr/share/nginx/html;    }}</code></pre><p>resolver为DNS解析,这里填写的IP为Google提供的免费DNS服务器的IP地址</p><p>proxy_pass配置代理转发</p><p>至此便是配置了B服务器所有访问根一级的请求全部都代理转发对应到$http_host$request_uri去了,$http_host就是我们要访问的主机名,$request_uri就是我们后面所加的参数。</p><p>简单的说至此就是相当于配置好了我们请求了B服务器,B服务器再去请求我们所请求的地址。</p><p>那么来看一下结果：</p><p>添加网络代理：</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx5.png" alt="正向代理和反向代理5"></p><p>登录<a href="http://www.ip138.com/" target="_blank" rel="noopener">http://www.ip138.com/</a> 可以看到此时我们的IP地址已经为B服务器的IP,说明代理成功。</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx6.png" alt="正向代理和反向代理6"></p><p>然后再来访问一下test.html:</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx3.png" alt="正向代理和反向代理7"></p><p>结果证明,此时的客户端已经可以成功访问A服务器的资源。</p><blockquote><p>以上就是正向代理的一个场景演示,这个过程中可以知道,我们客户端是想要A的资源,但是A的资源只有B能拿到,便让B代理去帮助我们访问A的资源。整个过程A只知道B拿了他的资源,并不知道客户端拿到。</p></blockquote><blockquote><p>反向代理</p></blockquote><p>首先在/etc/nginx/conf.d/下新建一个test.conf:</p><pre><code>server {    listen       8080;    server_name  localhost nginx.tangll.cn;    location / {        root   /opt/app/demo/html;        index  index.html index.htm;    }    error_page   500 502 503 504 404  /50x.html;    location = /50x.html {        root   /usr/share/nginx/html;    }}</code></pre><p>可以看到server里listen的是8080端口,但是服务器本身不对外开放8080端口,只开放了80端口。</p><p>所以我们此时访问test.html结果是访问不到的:</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx7.png" alt="正向代理和反向代理8"></p><p>然后打开nginx.conf<br>添加proxy_pass设置如下:</p><pre><code>server {    listen       80;    server_name  localhost nginx.tangll.cn;    location / {        root   /usr/share/nginx/html;        index  index.html index.htm;    }    #设置代理    #location ~ /test.html$ {    #    proxy_pass http://127.0.0.1:8080;    #}    error_page   500 502 503 504 404  /50x.html;    location = /50x.html {        root   /usr/share/nginx/html;    }}</code></pre><p>设置当匹配test.html结尾的URL时就去代理访问本机的8080端口</p><p>为了对比先注释掉,然后直接80端口访问一下test.html:</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx8.png" alt="正向代理和反向代理9"></p><p>可以看到此时返回的404。</p><p>这时候取消注释reload一下nginx然后用80端口访问test.html</p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/nginx3.png" alt="正向代理和反向代理10"></p><p>此时便可访问8080端口配置的资源。</p><blockquote><p>以上便是完成了一个反向代理的演示,这个过程中我们可以知道,客户端想要访问的是test.html,但是test.html实际上是8080端口下配置的,中间经过了代理才能拿到。也就是说客户端并不知道中间经历了什么代理过程,只有服务端知道。客户端只知道他拿到了test.html也就是8080端口下配置的资源内容。</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><blockquote><p>上述测试使用Nginx进行反向代理HTTP请求实质有经过几个步骤。首先，访问网站后，会进入hosts文件，寻到对应访问的IP地址（节省去了域名解析的时间）。而后请求变为127.0.0.1:80，而后借助Nginx中的代理配置，将请求代理到端口为8089的端口，即完成使用域名对127.0.0.1:8089的访问。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>代理服务器站在客户端那边就是正向代理，</p></li><li><p>代理服务器站在原始服务器那边就是反向代理,</p></li><li><p>Nginx通过proxy_pass可以设置代理服务。</p></li></ul><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul><li>一个需要注意点就是DNS解析是有缓存的，可能导致访问反向代理不生效，可以使用ipconfig /flushdns 刷新一下本地 dns 缓存</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><pre><code>#运行用户#user somebody;#启动进程,通常设置成和cpu的数量相等worker_processes  1;#全局错误日志error_log  D:/Tools/nginx-1.10.1/logs/error.log;error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;#PID文件，记录当前启动的nginx的进程IDpid        D:/Tools/nginx-1.10.1/logs/nginx.pid;#工作模式及连接数上限events {    worker_connections 1024;    #单个后台worker process进程的最大并发链接数}#设定http服务器，利用它的反向代理功能提供负载均衡支持http {    #设定mime类型(邮件支持类型),类型由mime.types文件定义    include       D:/Tools/nginx-1.10.1/conf/mime.types;    default_type  application/octet-stream;    #设定日志    log_format  main  &#39;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log    D:/Tools/nginx-1.10.1/logs/access.log main;    rewrite_log     on;    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.    sendfile        on;    #tcp_nopush     on;    #连接超时时间    keepalive_timeout  120;    tcp_nodelay        on;    #gzip压缩开关    #gzip  on;    #设定实际的服务器列表     upstream zp_server1{        server 127.0.0.1:8089;    }    #HTTP服务器    server {        #监听80端口，80端口是知名端口号，用于HTTP协议        listen       80;        #定义使用www.xx.com访问        server_name  www.helloworld.com;        #首页        index index.html        #指向webapp的目录        root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp;        #编码格式        charset utf-8;        #代理配置参数        proxy_connect_timeout 180;        proxy_send_timeout 180;        proxy_read_timeout 180;        proxy_set_header Host $host;        proxy_set_header X-Forwarder-For $remote_addr;        #反向代理的路径（和upstream绑定），location 后面设置映射的路径        location / {            proxy_pass http://zp_server1;        }         #静态文件，nginx自己处理        location ~ ^/(images|javascript|js|css|flash|media|static)/ {            root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp\views;            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。            expires 30d;        }        #设定查看Nginx状态的地址        location /NginxStatus {            stub_status           on;            access_log            on;            auth_basic            &quot;NginxStatus&quot;;            auth_basic_user_file  conf/htpasswd;        }        #禁止访问 .htxxx 文件        location ~ /\.ht {            deny all;        }        #错误处理页面（可选择性配置）        #error_page   404              /404.html;        #error_page   500 502 503 504  /50x.html;        #location = /50x.html {        #    root   html;        #}    }}</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/ae76c223c6ef" target="_blank" rel="noopener">Nginx正向代理与反向代理</a></p><p><a href="https://blog.csdn.net/qq_33404395/article/details/80523850" target="_blank" rel="noopener">Nginx实现HTTP反向代理配置</a></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自启动服务管理</title>
      <link href="/2019/08/20/linux-zi-qi-dong-fu-wu-guan-li/"/>
      <url>/2019/08/20/linux-zi-qi-dong-fu-wu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="linux服务管理的两种方式是service和systemd"><a href="#linux服务管理的两种方式是service和systemd" class="headerlink" title="linux服务管理的两种方式是service和systemd"></a>linux服务管理的两种方式是service和systemd</h1><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><blockquote><p>概述：service命令其实是去/etc/init.d目录下，去执行相关程序</p></blockquote><pre><code># service命令启动redis脚本service redis start# 直接启动redis脚本/etc/init.d/redis start# 开机自启动update-rc.d redis defaults</code></pre><blockquote><p>缺点：</p></blockquote><pre><code> 一是启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程 二是启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长</code></pre><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h3><blockquote><p>概述：systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。</p></blockquote><blockquote><p>systemctl 是 Systemd 的主命令，用于管理系统</p></blockquote><pre><code>#常用命令：systemctl --version，查看版本。     systemctl list-unit-files，列出所有可用单元（服务）。systemctl list-units，列出所有运行中的单元。systemctl --failed，列出所有失败的单元。systemctl list-unit-files | grep enable，查看自启动的软件。systemctl is-enabled mysqld.service，查看某个单元是否开机启动。systemctl status mysqld.service，查看某个单元的状态。systemctl start mysqld.service，启动某个单元。systemctl restart mysqld.service，重启某个单元。systemctl stop mysqld.service，停止某个单元。systemctl daemon-reload，修改了某个单元的配置文件后，重载配置文件。systemctl reload mysqld.service，重载某个单元。systemctl enable mysqld.service，设置开机自启动。systemctl disable mysqld.service，关闭开机自启动。systemctl kill mysqld，杀死单元。</code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><blockquote><p>以Nginx为例设置开机启动，其他服务类似</p></blockquote><ul><li><p>在系统   服务目录里创建nginx.service文件</p><pre><code>  vi /usr/lib/systemd/system/nginx.service</code></pre></li><li><p>写入内容如下</p><pre><code>  [Unit]  Description=nginx  After=network.target  [Service]  Type=forking  ExecStart=/usr/local/nginx/sbin/nginx  ExecReload=/usr/local/nginx/sbin/nginx -s reload  ExecStop=/usr/local/nginx/sbin/nginx -s quit  PrivateTmp=true  [Install]  WantedBy=multi-user.target</code></pre></li><li><p>设置开机自启动</p><pre><code>  systemctl enable nginx.service</code></pre></li><li><p>查看nginx状态</p><pre><code>  systemctl status nginx.service</code></pre></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/ca5ee5f7075c" target="_blank" rel="noopener">https://www.jianshu.com/p/ca5ee5f7075c</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux编译安装php常见错误</title>
      <link href="/2019/08/17/linux-bian-yi-an-zhuang-php-chang-jian-cuo-wu/"/>
      <url>/2019/08/17/linux-bian-yi-an-zhuang-php-chang-jian-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>1、configure: error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution<br>　　解决方法：<br>　　yum -y install libxslt-devel</p><p>2、configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation.<br>　　解决方法：<br>　　yum -y install net-snmp-devel</p><p>3、configure: error: Please reinstall readline - I cannot find readline.h<br>　　解决方法：<br>　　yum -y install readline-devel</p><p>4、configure: error: Cannot find pspell<br>　　解决方法：<br>　　yum -y install aspell-devel</p><p>5、checking for unixODBC support… configure: error: ODBC header file ‘/usr/include/sqlext.h’ not found!<br>　　解决方法：<br>　　yum -y install unixODBC-devel</p><p>6、configure: error: Unable to detect ICU prefix or /usr/bin/icu-config failed. Please verify ICU install prefix and make sure icu-config works.<br>　　解决方法：<br>　　yum -y install libicu-devel</p><p>7、configure: error: utf8mime2text() has new signature, but U8TCANONICAL is missing. This should not happen. Check config.log for additional information.<br>　　解决方法：<br>　　yum -y install libc-client-devel</p><p>8、configure: error: freetype.h not found.<br>　　解决方法：<br>　　yum -y install freetype-devel</p><p>9、configure: error: xpm.h not found.<br>　　解决方法：<br>　　yum -y install libXpm-devel</p><p>10、configure: error: png.h not found.<br>　　解决方法：<br>　　yum -y install libpng-devel</p><p>11、configure: error: vpx_codec.h not found.<br>解决方法：<br>　　yum -y install libvpx-devel</p><p>12、configure: error: Cannot find enchant<br>解决方法：<br>　　yum -y install enchant-devel</p><p>13、configure: error: Please reinstall the libcurl distribution - easy.h should be in /include/curl/<br>解决方法：<br>　　yum -y install libcurl-devel</p><p>14、configure: error: mcrypt.h not found. Please reinstall libmcrypt.<br>　　解决方法：<br>　　wget <a href="ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.7.tar.gz">ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.7.tar.gz</a><br>　　tar zxf libmcrypt-2.5.7.tar.gz<br>　　cd libmcrypt-2.5.7<br>　　./configure<br>　　make &amp;&amp; make install<br>15、Cannot find imap</p><p>　　解决方法：<br>　　ln -s /usr/lib64/libc-client.so /usr/lib/lio</p><p>16、configure: error: utf8_mime2text() has new signature, but U8T_CANONICAL is missing.<br>　　解决方法：<br>　　yum -y install libc-client-devel</p><p>17、Cannot find ldap.h<br>　　解决方法：<br>　　yum -y install openldap<br>　　yum -y install openldap-devel</p><p>18、configure: error: Cannot find ldap libraries in /usr/lib<br>　　解决方法：<br>　　cp -frp /usr/lib64/libldap* /usr/lib/</p><p>19、configure: error: Cannot find libpq-fe.h. Please specify correct PostgreSQL installation path<br>　　解决方法：<br>　　yum -y install postgresql-devel</p><p>20、configure: error: Please reinstall the lib curl distribution<br>　　解决方法：<br>　　yum -y install curl-devel</p><p>21、configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation.<br>　　解决方法：<br>　　yum -y install net-snmp-devel</p><p>　　checking whether to enable XMLWriter support… yes, shared checking for xml2-config path… (cached) /usr/bin/xml2-config checking 　　whether libxml build works… (cached) yes checking for XSL support… yes, shared configure: error: xslt-config not found. Please 　　　　reinstall the libxslt &gt;= 1.1.0 distribution<br>　　解决方法：<br>　　yum -y install libxslt-devel</p><p>23、checking for BZip2 support… yes checking for BZip2 in default path… not found configure: error: Please reinstall the BZip2 distribution</p><p>　　解决方法：<br>　　<br>　　yum -y install bzip2-devel</p><p>24、checking for cURL support… yes checking if we should use cURL for url streams… no checking for cURL in default path… not found configure: error: Please reinstall the libcurl distribution – easy.h should be in/include/curl/</p><p>　　解决方法：<br>　　<br>　　yum -y install curl-devel</p><p>25、checking for curl_multi_strerror in -lcurl… yes checking for QDBM support… no checking for GDBM support… no checking for NDBM support… no configure: error: DBA: Could not find necessary header file(s).</p><p>　　解决方法：<br>　　yum -y install db4-devel</p><p>26、checking for fabsf… yes checking for floorf… yes configure: error: jpeglib.h not found.</p><p>　　解决方法：<br>　　yum -y install libjpeg-devel</p><p>27、checking for fabsf… yes checking for floorf… yes checking for jpeg_read_header in -ljpeg… yes configure: error: png.h not found.</p><p>　　解决方法：<br>　　yum -y install libpng-devel</p><p>28、checking for png_write_image in -lpng… yes If configure fails try –with-xpm-dir=</p><p>configure: error: freetype.h not found.<br>　　解决方法：<br>　　yum -y install freetype-devel<br>29、checking for png_write_image in -lpng… yes configure: error: libXpm.(a|so) not found.</p><p>　　解决方法：<br>　　yum -y install libXpm-devel</p><p>30、checking for bind_textdomain_codeset in -lc… yes checking for GNU MP support… yes configure: error: Unable to locate gmp.h</p><p>　　解决方法：<br>　　yum -y install gmp-devel</p><p>31、checking for utf8_mime2text signature… new checking for U8T_DECOMPOSE… configure: error: utf8_mime2text() has new signature, but U8T_CANONICAL is missing. This should not happen. Check config.log for additional information.</p><p>　　解决方法：<br>　　yum -y install libc-client-devel</p><p>32、checking for LDAP support… yes, shared checking for LDAP Cyrus SASL support… yes configure: error: Cannot find ldap.h</p><p>　　解决方法：<br>　　yum -y install openldap-devel</p><p>33、checking for mysql_set_character_set in -lmysqlclient… yes checking for mysql_stmt_next_result in -lmysqlclient… no checking for Oracle Database OCI8 support… no checking for unixODBC support… configure: error: ODBC header file ‘/usr/include/sqlext.h’ not found!</p><p>　　解决方法：<br>　　yum -y install unixODBC-devel</p><p>34、checking for PostgreSQL support for PDO… yes, shared checking for pg_config… not found configure: error: Cannot find libpq-fe.h. Please specify correct PostgreSQL installation path</p><p>　　解决方法：<br>　　yum -y install postgresql-devel</p><p>35、checking for sqlite 3 support for PDO… yes, shared checking for PDO includes… (cached) /usr/local/src/php-5.3.7/ext checking for sqlite3 files in default path… not found configure: error: Please reinstall the sqlite3 distribution</p><p>　　解决方法：<br>　　yum -y install sqlite-devel</p><p>36、checking for utsname.domainname… yes checking for PSPELL support… yes configure: error: Cannot find pspell</p><p>　　解决方法：<br>　　yum -y install aspell-devel</p><p>37、checking for kstat_read in -lkstat… no checking for snmp_parse_oid in -lsnmp… no checking for init_snmp in -lsnmp… no configure: error: SNMP sanity check failed. Please check config.log for more information.</p><p>　　解决方法：<br>　　yum -y install net-snmp-devel</p><p>38、checking whether to enable XMLWriter support… yes, shared checking for xml2-config path… (cached) /usr/bin/xml2-config checking whether libxml build works… (cached) yes checking for XSL support… yes, shared configure: error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution</p><p>　　解决方法：<br>　　yum -y install libxslt-devel</p><p>39、configure: error: xml2-config not found. Please check your libxml2 installation.</p><p>　　解决方法：<br>　　yum -y install libxml2-devel</p><p>40、checking for PCRE headers location… configure: error: Could not find pcre.h in /usr</p><p>　　解决方法：<br>　　yum -y install pcre-devel</p><p>41、configure: error: Cannot find MySQL header files under yes. Note that the MySQL client library is not bundled anymore!</p><p>　　解决方法：<br>　　yum -y install mysql-devel</p><p>42、checking for unixODBC support… configure: error: ODBC header file ‘/usr/include/sqlext.h’ not found!</p><p>　　解决方法：<br>　　yum -y install unixODBC-devel</p><p>43、checking for pg_config… not found configure: error: Cannot find libpq-fe.h. Please specify correct PostgreSQL installation path</p><p>　　解决方法：<br>　　yum -y install postgresql-devel</p><p>44、configure: error: Cannot find pspell</p><p>　　解决方法：<br>　　yum -y install pspell-devel</p><p>45、configure: error: Could not find net-snmp-config binary. Please check your net-snmp installation.</p><p>　　解决方法：<br>　　yum -y install net-snmp-devel</p><p>46、configure: error: xslt-config not found. Please reinstall the libxslt &gt;= 1.1.0 distribution</p><p>　　解决方法：<br>　　yum -y install libxslt-devel</p><ul><li><p>备注：</p><p>  原文地址：<a href="https://www.cnblogs.com/liang-wei/p/6564424.html" target="_blank" rel="noopener">https://www.cnblogs.com/liang-wei/p/6564424.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 搭建 Nginx &amp; Mysql &amp; PHP 环境</title>
      <link href="/2019/08/12/da-jian-lnmp/"/>
      <url>/2019/08/12/da-jian-lnmp/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p>Nginx官网下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p></blockquote><ul><li><p>安装依赖：</p><pre><code>  yum -y install gcc zlib* pcre*openssl* wget gcc-c++ tree</code></pre></li><li><p>官网下载源码包：</p><pre><code>  cd /usr/local/src  wget http://nginx.org/download/nginx-1.17.3.tar.gz  tar -zxvf nginx-1.17.3.tar.gz</code></pre></li><li><p>安装Nginx：</p><pre><code>  cd /usr/local/src/nginx-1.17.3  ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre  make &amp;&amp; make install</code></pre></li><li><p>配置Nginx：</p><pre><code>  vi /usr/local/nginx/conf/nginx.conf  // 大致修改如下：  worker_processes  auto;  server {          listen       80;          server_name  localhost;          root         /data/www/default;          location / {              index  index.html index.htm index.php;              if ( -f $request_filename) {                 break;              }              if ( !-e $request_filename) {                 rewrite ^(.*)$ /index.php/$1 last;                 break;              }          }          error_page   500 502 503 504  /50x.html;          location = /50x.html {              root   html;          }          // php解析          location ~ \.php {              fastcgi_pass   127.0.0.1:9000;              fastcgi_index  index.php;              fastcgi_split_path_info ^(.+\.php)(.*)$;              fastcgi_param PATH_INFO $fastcgi_path_info;              fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;              include        fastcgi_params;          }      }</code></pre></li><li><p>启动Nginx：</p><pre><code>  # 启动  /usr/local/nginx/sbin/nginx  # 查看nginx进程是否启动  ps -ef | grep nginx</code></pre></li><li><p>一键shell：</p><pre><code>  yum -y install gcc zlib* pcre*openssl* wget gcc-c++ tree  cd /usr/local/src  NGINXVERSION=1.17.3  wget http://nginx.org/download/nginx-${NGINXVERSION}.tar.gz  tar -zxvf nginx-${NGINXVERSION}.tar.gz &amp;&amp; cd nginx-${NGINXVERSION}  ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre  make &amp;&amp; make install  rm -f /usr/local/nginx/conf/nginx.conf &amp;&amp; touch /usr/local/nginx/conf/nginx.conf &amp;&amp; echo &#39;/  #user  nobody;  worker_processes  auto;  worker_cpu_affinity auto;  worker_rlimit_nofile 65535;  #error_log  logs/error.log;  error_log  logs/error.log  notice;  #error_log  logs/error.log  info;  #pid        logs/nginx.pid;  events {      worker_connections  1024;  }  http {      include       mime.types;      default_type  application/octet-stream;      client_max_body_size   20m;      #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;      #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;      #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;      #access_log  logs/access.log  main;      sendfile        on;      #tcp_nopush     on;      #keepalive_timeout  0;      keepalive_timeout  65;      #gzip  on;      #include     vhost/*.conf;      server {          listen       80;          server_name  localhost;          rewrite ^(.*)$  https://$host$1 permanent;      }      server {          listen       443 ssl;          server_name  localhost;          root         /data/www/default;          ssl                  on;          ssl_certificate      ./ssl/xzky.pem;          ssl_certificate_key  ./ssl/xzky.key;          #ssl_client_certificate ca.crt;          #ssl_verify_client on;          ssl_session_timeout  5m;          ssl_protocols TLSv1 TLSv1.1 TLSv1.2;          ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;          ssl_prefer_server_ciphers   on;          location / {              index  index.html index.htm index.php;              if ( -f $request_filename) {                 break;              }              if ( !-e $request_filename) {                 rewrite ^(.*)$ /index.php/$1 last;                 break;              }          }          error_page   500 502 503 504  /50x.html;          location = /50x.html {              root   html;          }          location ~ \.php {              fastcgi_pass   127.0.0.1:9000;              fastcgi_index  index.php;              fastcgi_split_path_info ^(.+\.php)(.*)$;              fastcgi_param PATH_INFO $fastcgi_path_info;              fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;              include        fastcgi_params;          }      }  }&#39; &gt; /usr/local/nginx/conf/nginx.conf  /usr/local/nginx/sbin/nginx</code></pre></li><li><p>备注：</p><ol><li>Q：关于Linux下Nginx服务启动，通过浏览器无法访问的问题？<br>A：<pre><code>       # 防火墙没有开启，添加 Nginx 端口配置，如80       firewall-cmd --zone=public --add-port=80/tcp --permanent       # 重启防火墙       systemctl restart firewalld.service</code></pre></li><li>Q：nginx: [error] open() “/usr/local/nginx/logs/nginx.pid” failed (2: No such file or directory)<br> A：<pre><code>       # 使用指定nginx.conf文件的方式重启nginx       /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre></li></ol></li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><blockquote><p>PHP官网下载地址：<a href="https://www.php.net/downloads.php" target="_blank" rel="noopener">https://www.php.net/downloads.php</a></p></blockquote><ul><li><p>安装依赖：</p><pre><code>  yum -y install make libtool libxml2 libxml* libxslt* gd libjpeg* libpng* freetype* curl* libaio*</code></pre></li><li><p>官网下载源码包：</p><pre><code>  cd /usr/local/src  wget https://www.php.net/distributions/php-7.0.33.tar.gz  tar -zxvf php-7.0.33.tar.gz</code></pre></li><li><p>安装PHP：</p><pre><code>  cd /usr/local/src/php-7.0.33  // php7.3起 废弃gd库 --enable-gd-native-ttf  ./configure --prefix=/usr/local/php --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-jpeg-dir  make &amp;&amp; make install</code></pre></li><li><p>配置PHP：</p><pre><code>  cp ./php.ini-development /usr/local/php/lib/php.ini  cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf  cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf  cp -R /usr/local/php/sbin/php-fpm /etc/init.d/php-fpm  sed -i &quot;s/pm\.max_children \= 5/pm\.max_children \= 400/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.start_servers \= 2/pm\.start_servers \= 40/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.min_spare_servers \= 1/pm\.min_spare_servers \= 20/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.max_spare_servers \= 3/pm\.max_spare_servers \= 80/g&quot; /usr/local/php/etc/php-fpm.d/www.conf</code></pre></li><li><p>启动PHP：</p><pre><code>  /usr/local/php/sbin/php-fpm</code></pre></li><li><p>一键shell：</p><pre><code>  yum -y install make libtool libxml2 libxml* libxslt* gd libjpeg* libpng* freetype* curl* libaio*  cd /usr/local/src  PHPVERSION=7.0.33  wget https://www.php.net/distributions/php-${PHPVERSION}.tar.gz  tar -zxvf php-${PHPVERSION}.tar.gz &amp;&amp; cd php-${PHPVERSION}  ./configure --prefix=/usr/local/php --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --with-jpeg-dir  make &amp;&amp; make install  cp ./php.ini-development /usr/local/php/lib/php.ini  cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf  cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf  cp -R /usr/local/php/sbin/php-fpm /etc/init.d/php-fpm  sed -i &quot;s/pm\.max_children \= 5/pm\.max_children \= 400/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.start_servers \= 2/pm\.start_servers \= 40/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.min_spare_servers \= 1/pm\.min_spare_servers \= 20/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  sed -i &quot;s/pm\.max_spare_servers \= 3/pm\.max_spare_servers \= 80/g&quot; /usr/local/php/etc/php-fpm.d/www.conf  /usr/local/php/sbin/php-fpm</code></pre></li><li><p>备注：</p><ol><li>Q：nginx+php环境的file not found问题<br>A：<ol><li>nginx配置文件中配置的php文件指向的目录不对，导致找不到文件<pre><code>     # 这种情况应该这么做，注意代码中的{{{web目录}}}改成你对应的web目录     location ~ .*\.php$ {           fastcgi_pass   127.0.0.1:9000;           fastcgi_index  index.php;           fastcgi_param  SCRIPT_FILENAME {{{web目录}}}$fastcgi_script_name;           include        fastcgi.conf;       }</code></pre></li><li>访问web目录的权限不够</li></ol></li></ol></li></ul><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><blockquote><p>Mysql官网下载地址：<a href="https://dev.mysql.com/Downloads" target="_blank" rel="noopener">https://dev.mysql.com/Downloads</a></p></blockquote><ul><li><p>说明：下载的源码包直接可以使用，无需编译安装（绿色版）</p></li><li><p>官网下载源码包：</p><pre><code>  cd /usr/local/src  wget https://dev.mysql.com/Downloads/MySQL-5.7/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz  tar -zxvf mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</code></pre></li><li><p>复制Mysql：</p><pre><code>  mv /usr/local/src/mysql-5.7.27-linux-glibc2.12-x86_64 ../mysql</code></pre></li><li><p>创建Mysql用户：</p><pre><code>  cd usr/local/mysql  groupadd mysql  useradd mysql -s /sbin/nologin -g mysql  chown -R mysql:mysql /data/mysql  chown -R mysql:mysql ./</code></pre></li><li><p>配置Mysql：</p><pre><code>  sed -i &quot;s/var\/lib/data/g&quot; /etc/my.cnf  sed -i &#39;12,13d&#39; /etc/my.cnf  usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql  chown -R root:root usr/local/mysql</code></pre></li><li><p>启动Mysql:</p><pre><code>  usr/local/mysql/support-files/mysql.server start</code></pre></li><li><p>一键shell：</p><pre><code>  cd /usr/local/src  MYSQLVERSION=5.7.27  wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-${MYSQLVERSION}-linux-glibc2.12-x86_64.tar.gz  tar -zxvf mysql-${MYSQLVERSION}-linux-glibc2.12-x86_64.tar.gz &amp;&amp; mv mysql-${MYSQLVERSION}-linux-glibc2.12-x86_64 ../mysql  cd ../mysql  groupadd mysql  useradd mysql -s /sbin/nologin -g mysql  chown -R mysql:mysql /data/mysql  chown -R mysql:mysql ./  sed -i &quot;s/var\/lib/data/g&quot; /etc/my.cnf  sed -i &#39;12,13d&#39; /etc/my.cnf  ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql  chown -R root:root ./  ./support-files/mysql.server start</code></pre></li><li><p>开启Mysql远程连接：</p><pre><code>  mysql -u root -p  # 使用 grant 命令重新创建一个用户  GRANT ALL PRIVILEGES ON *.* TO &#39;账号&#39;@&#39;%&#39; IDENTIFIED BY &#39;your password&#39;   # 刷新权限  flush privileges;  # 查看目前防火墙  firewall-cmd --list-all   # 开放3306端口  firewall-cmd --permanent --add-port=3306/tcp  # 重启防火墙,查看3306端口是否开放  service firewalld restart</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP / IP 协议</title>
      <link href="/2019/08/07/tcp-ip-xie-yi/"/>
      <url>/2019/08/07/tcp-ip-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP / IP 协议"></a>TCP / IP 协议</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。</li><li>基于TCP/IP的参考模型将协议分成四个层次，它们分别是链路层、网络层、传输层和应用层。下图表示TCP/IP模型与OSI模型各层的对照关系。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp1.jpg" alt="Osi 九层/四层 图1"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp2.jpg" alt="Osi 九层/四层 图2"></p><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ul><li>链路层：<blockquote><p>对电信号进行分组并形成具有特定意义的数据帧，然后以广播的形式通过物理介质发送给接收方。</p></blockquote></li><li>网络层：<blockquote><p>定义网络地址，区分网段，子网内MAC寻址，对于不同子网的数据包进行路由。（ 网络层协议包括 IP 协议（网际协议），ICMP 协议（ Internet 互联网控制报文协议），以及 IGMP 协议（ Internet 组管理协议, ARP协议等。）</p></blockquote></li><li>传输层：<blockquote><p>定义端口，标识应用程序身份，实现端口到端口的通信，TCP协议可以保证数据传输的可靠性。</p></blockquote></li><li>应用层：<blockquote><p>定义数据格式并按照对应的格式解读数据。</p></blockquote></li><li>全流程：<ul><li>链路层：对0和1进行分组，定义数据帧，确认主机的物理地址，传输数据；</li><li>网络层：定义IP地址，确认主机所在的网络位置，并通过IP进行MAC寻址，对外网数据包进行路由转发；</li><li>传输层：定义端口，确认主机上应用程序的身份，并将数据包交给对应的应用程序；</li><li>应用层：定义数据格式，并按照对应的格式解读数据。</li><li>用一句通俗易懂的话讲就是：<blockquote><p>当你输入一个网址并按下回车键的时候，首先，应用层协议对该请求包做了格式定义；紧接着传输层协议加上了双方的端口号，确认了双方通信的应用程序；然后网络协议加上了双方的IP地址，确认了双方的网络位置；最后链路层协议加上了双方的MAC地址，确认了双方的物理位置，同时将数据进行分组，形成数据帧，采用广播方式，通过传输介质发送给对方主机。而对于不同网段，该数据包首先会转发给网关路由器，经过多次转发后，最终被发送到目标主机。目标机接收到数据包后，采用对应的协议，对帧数据进行组装，然后再通过一层一层的协议进行解析，最终被应用层的协议解析并交给服务器处理。</p></blockquote></li></ul></li></ul><h3 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h3><blockquote><p>在 TCP / IP　协议中数据先由上往下将数据装包，然后由下往上拆包.在装包的时候，每一层都会增加一些信息用于传输，这部分信息就叫报头，当上层的数据到达本层的时候，会将数据加上本层的报头打包在一起，继续往下传递．</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp3.png" alt="tcp/ip 流程图1"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp4.png" alt="tcp/ip 流程图2"></p><h3 id="TCP-三次握手、四次挥手"><a href="#TCP-三次握手、四次挥手" class="headerlink" title="TCP 三次握手、四次挥手"></a>TCP 三次握手、四次挥手</h3><ul><li><p>三次握手：</p><ol><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手： Server 收到数据包后由标志位 SYN=1 知道 Client 请求建立连接， Server 将标志位 SYN 和 ACK 都置为 1 ， ack=J+1 ，随机产生一个值 seq=K ，并将该数据包发送给 Client 以确认连接请求， Server 进入 SYN_RCVD 状态。Server确认。</li><li>Client 收到确认后，检查 ack 是否为 J+1 ， ACK 是否为 1 ，如果正确则将标志位 ACK 置为 1 ， ack=K+1 ，并将该数据包发送给 Server ， Server 检查 ack 是否为 K+1 ， ACK 是否为 1 ，如果正确则连接建立成功， Client 和 Server 进入 ESTABLISHED 状态，完成三次握手，随后 Client 与 Server 之间可以开始传输数据了。</li></ol></li><li><p>四次挥手：</p><ol><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</li><li>第二次挥手： Server 收到 FIN 后，发送一个 ACK 给 Client ，确认序号为收到序号 +1 （与 SYN 相同，一个 FIN 占用一个序号）， Server 进入 CLOSE_WAIT 状态。</li><li>第三次挥手： Server 发送一个 FIN ，用来关闭 Server 到 Client 的数据传送， Server 进入 LAST_ACK 状态。</li><li>第四次挥手： Client 收到 FIN 后， Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server ，确认序号为收到序号 +1 ， Server 进入 CLOSED 状态，完成四次挥手。</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp5.jpg" alt="三次握手 图1"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp6.jpg" alt="四次握手 图1"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp7.png" alt="三次握手 图2"></p><p><img src="https://cdn.jsdelivr.net/gh/CrazyDuck827/CrazyDuck827.github.io/image/tcp8.png" alt="四次握手 图2"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="noopener">深入浅出 TCP/IP 协议栈</a></p><p><a href="https://blog.csdn.net/patrick_star_cowboy/article/details/82016692" target="_blank" rel="noopener">这样的TCP/IP协议，你看懂了吗？</a></p><p><a href="https://blog.csdn.net/u012371712/article/details/80795297" target="_blank" rel="noopener">关于TCP/IP，必须知道的十个知识点</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> Web </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
